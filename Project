#include <iostream>
using namespace std;
struct TreeNode {
int val;
TreeNode *left, *right;
TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};
class Solution {
public:
int kthSmallest(TreeNode* root, int k) {
int count = 0;
int result = -1;
inorderTraversal(root, k, count, result);
return result;
}
private:
void inorderTraversal(TreeNode* root, int k, int &count, int &result) {
if (!root) return;
inorderTraversal(root->left, k, count, result);
count++;
if (count == k) {
result = root->val;
return;
}
inorderTraversal(root->right, k, count, result);
}
};
TreeNode* insert(TreeNode* root, int val) {
if (!root) {
return new TreeNode(val);
}
if (val < root->val) {
root->left = insert(root->left, val);
} else {
root->right = insert(root->right, val);
}
return root;
}
int main() {
Solution solution;
TreeNode* root = nullptr;
root = insert(root, 5);
root = insert(root, 3);
root = insert(root, 6);
root = insert(root, 2);
root = insert(root, 4);
int k = 4;
int result = solution.kthSmallest(root, k);
if (result != -1) {
cout << "The " << k << "-th smallest element in the BST is: " << result << endl;
} else {
cout << "The tree doesn't have " << k << " elements." << endl;
}
return 0;
}
